meta:
  title: DUCK Rulebase
  description:
  version: 0.4
  id: 2

language:
  action/2: action(%s,%s)
  compatiblePurpose/2: compatiblePurpose(%s,%s)
  ¬consentRequired/1: ¬consentRequired(%s)
  consentRequired/1: consentRequired(%s)
  dataCategory/2: dataCategory(%s,%s)
  dataUseStatement/1: dataUseStatement(%s)
  docConsentRequired/0: docConsentRequired
  ¬docConsentRequired/0: ¬docConsentRequired
  duplicate/2: duplicate(%s,%s)
  extendsScope/2: extendsScope(%s,%s)
  greaterScope/2: greaterScope(%s,%s)
  id/2: id(%s,%s)
  kindOf/2: kindOf(%s,%s)
  li/1: li(%s)
  ¬li/1: ¬li(%s)
  pii/1: pii(%s)
  ¬pii/1: ¬pii(%s)
  passive/2: passive(%s,%t)
  partOf/2: partOf(%s,%s)
  qualifier/2: qualifier(%s,%s)
  resultScope/2: resultScope(%s,%s)
  scope/2: scope(%s,%s)
  sourceScope/2: sourceScope(%s,%s)
  useScope/2: useScope(%s,%s)


issue_schemes:
  compatiblePurpose: [compatiblePurpose(S), ¬compatiblePurpose(S)]
  consent: [consentRequired(S), ¬consentRequired(S)]
  docConsent: [docConsentRequired, ¬docConsentRequired]
  li: [li(S), ¬li(S)]
  pii: [pii(S), ¬pii(S)]

argument_schemes:

  selectors:
    variables: [UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive]
    premises:
      - dataUseStatement(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive))
    conclusions:
      - useScope(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),UseScope)
      - qualifier(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),Qualifier)
      - dataCategory(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),DataCategory)
      - sourceScope(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),SourceScope)
      - action(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),Action)
      - resultScope(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),ResultScope)
      - id(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),ID)
      - passive(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),Passive)

  # kindOf Rules

  kindOfTransitivity:
    variables: [X,Y,Z]
    premises:
      - kindOf(X,Y)
      - kindOf(Y,Z)
    conclusions:
      - kindOf(X,Z)

  # partOf Rules
  
  partOfTransitivity:
    variables: [X,Y,Z]
    premises:
      - partOf(X,Y)
      - partOf(Y,Z)
    conclusions:
      - partOf(X,Z)

  # Data Qualifier Rules

  qualifier1:
    variables: [S]
    premises:
      - qualifier(S,identified_data)
    conclusions:
      - qualifier(S,unqualified_or_identified)

  qualifier2:
    variables: [S]
    premises:
      - qualifier(S,unqualified)
    conclusions:
      - qualifier(S,unqualified_or_identified)

  # Scope Rules
  # Wider scopes include narrower scopes, expect for third_party items, which
  # independent scope.  For example, the service scope includes
  # the capability scope.
  
  scope1:
    variables: [S]
    premises:
      - scope(S,csp_products)
    conclusions:
      - scope(S,csp_services)

  scope2:
    variables: [S]
    premises:
      - scope(S,csp_services)
    conclusions:
      - scope(S,services_agreement)

  scope3:
    variables: [S]
    premises:
      - scope(S,services_agreement)
    conclusions:
      - scope(S,service)

  scope4:
    variables: [S]
    premises:
      - scope(S,service)
    conclusions:
      - scope(S,cability)

  # Data Category Rules

  category0:
    variables: [S,X,Y]
    premises:
      - dataCategory(S,X)
      - kindOf(X,Y)
    conclusions:
      - dataCategory(S,Y)
      
  category1:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_telemetry,derived_data_user)

  category2:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_connectivity,derived_data_user)

  category3:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_usage,derived_data_user)

  category4:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_demographic,derived_data_user)

  category5:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_profiling,derived_data_user)

  category6:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_content,derived_data_user)

  category7:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_browsing,derived_data_user)

  category8:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_search,derived_data_user)

  category9:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_location,derived_data_user)

  category10:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_social,derived_data_user)

  category11:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_biometric,derived_data_user)

  category12:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_contact,derived_data_user)

  category13:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user_environmental,derived_data_user)

  category14:
    variables: [X,Y]
    conclusions:
      - kindOf(customer_content_credentials,customer_content)

  category15:
    variables: [X,Y]
    conclusions:
      - kindOf(customer_content_contact,customer_content)

  category16:
    variables: [X,Y]
    conclusions:
      - kindOf(customer_content_health,customer_content)  # To Do: Not in taxonomy

  category17:
    variables: [X,Y]
    conclusions:
      - kindOf(customer_content_genetic,customer_content) # To Do: Not in taxonomy

  category18:
    variables: [X,Y]
    conclusions:
      - kindOf(customer_content_biometric,customer_content) # To Do: Not in taxonomy

  category19:
    variables: [X,Y]
    conclusions:
      - kindOf(customer_content_children,customer_content) # To Do: Not in taxonomy

  category20:
    variables: [X,Y]
    conclusions:
      - kindOf(customer_content_opinions,customer_content) # To Do: Not in taxonomy

  category21:
    variables: [X,Y]
    conclusions:
      - kindOf(customer_content_financial,customer_content) # To Do: Not in taxonomy

  category22:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_user,derived_data)

  category23:
    variables: [X,Y]
    conclusions:
      - kindOf(derived_data_organization,derived_data)

  category24:
    variables: [X,Y]
    conclusions:
      - kindOf(provider_data_authentication,provider_data)  

  category25:
    variables: [X,Y]
    conclusions:
      - kindOf(provider_data_operations,provider_data) # To Do: Not in taxonomy

  category26:
    variables: [X,Y]
    conclusions:
      - kindOf(account_data_customer,account_data)

  category27:
    variables: [X,Y]
    conclusions:
      - kindOf(account_data_payment,account_data)

  # Action Rules

  action0:
    variables: [S,X,Y]
    premises:
      - action(S,X)
      - kindOf(X,Y)
    conclusions:
      - action(S,Y)
      
  action1:
    variables: [X,Y]
    conclusions:
      - kindOf(market,market_advertise_promote) # To Do: Not in taxonomy

  action2:
    variables: [X,Y]
    conclusions:
      - kindOf(advertise,market_advertise_promote) # To Do: Not in taxonomy

  action3:
    variables: [X,Y]
    conclusions:
      - kindOf(promote,market_advertise_promote) # To Do: Not in taxonomy

  action4:
    variables: [X,Y]
    conclusions:
      - kindOf(market_contextual,market)

  action5:
    variables: [X,Y]
    conclusions:
      - kindOf(market_personalization,market)

  action6:
    variables: [X,Y]
    conclusions:
      - kindOf(advertise_contextual,advertise)

  action7:
    variables: [X,Y]
    conclusions:
      - kindOf(advertise_personalization,advertise)      

  action8:
    variables: [X,Y]
    conclusions:
      - kindOf(promote_contextual,promote)

  action9:
    variables: [X,Y]
    conclusions:
      - kindOf(promote_personalization,promote)        

 # removed from standard
 # action10:
 #   variables: [X,Y]
 #   conclusions:
 #     - kindOf(share_partners,share)

  action10:
    variables: [X,Y]
    conclusions:
      - kindOf(share_provide,share)            
      
  # docConsent Rules
  
  docConsent1:
    meta:
       comment: >
          By default, a data use document does not require informed consent
    weight:
       constant: 0.1   
    conclusions:
      - ¬docConsentRequired

  docConsent2:
    meta:
       comment: >
          A data use document does require informed consent
          if any of its data use statements requires informed consent.
    variables: [S]
    premises:
      - consentRequired(S)
    conclusions:
      - docConsentRequired

  # PII Rules

  pii0:
    meta:
      comment: Assume by default that the information is not personal
    weight:
      constant: 0.1 
    variables: [S]
    conclusions:
      - ¬pii(S)

  pii1:
    variables: [S]
    premises:
      - dataQualifier(S,unqualified_or_identified)
    conclusions:
      - pii(S)
    exceptions:
      - dataCategory(S,provider_data_operations)

  pii2:
    variables: [S]
    premises:
      - dataQualifier(S,pseudonymized_data)
    conclusions:
      - pii(S)
    exceptions:
      - dataCategory(S,derived_data_organization)
      
  pii3:
    variables: [S]
    premises:
      - dataQualifier(S,unlinked_data)  
    conclusions:
      - ¬pii(S)

  pii4:
    variables: [S]
    premises:
      - dataQualifier(S,anonymized_data)  
    conclusions:
      - ¬pii(S)


  pii5:
    variables: [S]
    premises:
      - dataQualifier(S,aggregated_data)  
    conclusions:
      - ¬pii(S)

  pii6:
    weight:
      constant: 0.6
    variables: [S]
    premises:
      - dataQualifier(S,pseudonymized_data)
      - dataCategory(S,derived_data_organization)
    conclusions:
      - ¬pii(S)

  pii7:
    weight:
      constant: 0.6
    variables: [S]
    premises:
      - dataQualifier(S,pseudonymized_data)
      - dataCategory(S,access_and_authentication_data)  # ToDo: not yet in the taxonomy file!
    conclusions:
      - ¬pii(S)

  pii8:
    weight:
      constant: 0.6
    variables: [S]
    premises:
      - dataQualifier(S,unqualified_or_identified)
      - dataCategory(S,derived_data_organization)
    conclusions:
      - ¬pii(S)

  pii9:
    weight:
      constant: 0.6
    variables: [S]
    premises:
      - dataQualifier(S,unqualified_or_identified)
      - dataCategory(S,access_and_authentication_data)  # ToDo: not yet in the taxonomy file!
    conclusions:
      - ¬pii(S)

  pii10:
    variables: [S]
    premises:
      - dataQualifier(S,unqualified)  # ToDo: not yet in the taxonomy file!
      - dataCategory(S,customer_content_credentials)
    conclusions:
      - pii(S)    

  pii11:
    variables: [S]
    premises:
      - dataQualifier(S,unqualified)  # ToDo: not yet in the taxonomy file!
      - dataCategory(S,derived_data_organization)
    conclusions:
      - ¬pii(S)

  pii12:
    variables: [S]
    premises:
      - dataQualifier(S,unqualified)  # ToDo: not yet in the taxonomy file!
      - dataCategory(S,access_and_authentication_data)  # ToDo: not yet in the taxonomy file!
    conclusions:
      - ¬pii(S)        

  # Legitimate Interest (LI) Rules

  li0:
    meta:
      comment: Assume by default that the interest is legitimate
    weight:
      constant: 0.1 
    variables: [S]
    conclusions:
      - li(S)

  # li1:
  #   variables: [S]
  #   premises:
  #     - action(S,provide)
  #     - resultScope(S,capability) 
  #   conclusions:
  #     - li(S)

  li1:
    variables: [S,C]
    premises:
      - action(S,provide)
      - resultScope(S,capability)
    conclusions:
      - li(S)  

  li2:
    variables: [S]
    premises:
      - action(S,provide)
      - resultScope(S,service) 
    conclusions:
      - li(S)
      
  li3:
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,capability) 
    conclusions:
      - li(S)
      
  li4:
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,service)
    conclusions:
      - li(S)

  li5:
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,services_agreement) 
    conclusions:
      - li(S)

  li6:
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,csp_services)
    conclusions:
      - li(S)

  li7:
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,csp_products)
    conclusions:
      - li(S)


  li8:
    variables: [S]
    premises:
      - action(S,personalize)
      - resultScope(S,capability)
    conclusions:
      - li(S)

  li9:
    variables: [S]
    premises:
      - action(S,personalize)
      - resultScope(S,service)
    conclusions:
      - li(S)

  li10:
    variables: [S]
    premises:
      - action(S,upgrades)
      - resultScope(S,capability)
    conclusions:
      - li(S)
      
  li11:
    variables: [S]
    premises:
      - action(S,upgrades)
      - resultScope(S,service)
    conclusions:
      - li(S)

  li12:
    variables: [S]
    premises:
      - action(S,upgrades)
      - resultScope(S,services_agreement)
    conclusions:
      - li(S)

  li13:
    variables: [S]
    premises:
      - action(S,market_advertise_promote)
      - resultScope(S,capability)
    conclusions:
      - li(S)

  li14:
    variables: [S]
    premises:
      - action(S,market_advertise_promote)
      - resultScope(S,service)
    conclusions:
      - li(S)

  # compatiblePurpose Rules

  compatiblePurpose0:
    meta:
      comment: Assume by default that the purpose of further processing is compatible
    weight:
      constant: 0.1 
    variables: [S1,S2]
    conclusions:
      - compatiblePurpose(S1,S2)

  compatiblePurpose1:
    variables: [S1,S2]
    premises:
      - resultScope(S2,capability)
      - resultScope(S1,cabability)
    conclusions:
      - compatiblePurpose(S1,S2)

  # consentRequired Rules

  consentRequired1:
    variables: [S]
    premises:
      - ¬pii(S)
    conclusions:
      - ¬consentRequired(S)

  consentRequired2:
    variables: [DUS,Action,UseScope]
    premises:
      - pii(S)
      - ¬li(S)
    conclusions:
      - consentRequired(S)

  consentRequired4:
    variables: [S1,S2]
    premises:
      - pii(S1)
      - li(S1)
      - compatiblePurpose(S1,S2)
    conclusions:
      - ¬consentRequired(S1)

