meta:
  title: DUCK Rulebase
  description: with locations
  version: 0.51
  id: 123   # hack, until the user can select the rulebase with the user interface.

language:
  action/2: action(%s,%s)
  apaEu/1: apaEu(%s)
  compatiblePurpose/2: compatiblePurpose(%s,%s)
  consentRequired/1: consentRequired(%s)
  consentRequired2TransferPii/1: consentRequired2TransferPii(%s) 
  dataCategory/2: dataCategory(%s,%s)
  dataUseStatement/1: dataUseStatement(%s)
  docConsentRequired/0: docConsentRequired
  notDocConsentRequired/0: notDocConsentRequired
  duplicate/2: duplicate(%s,%s)
  equivalentScope/2: equivalentScope(%s,%s)
  #  extendsScope/2: extendsScope(%s,%s)
  #  greaterScope/2: greaterScope(%s,%s)
  id/2: id(%s,%s)
  idRequired/1: idRequired(%s) 
  idNotRequired/1: idNotRequired(%s) 
  isInEu/1: isInEu(%s)
  isA/2: isA(%s,%s)
  kindOf/2: kindOf(%s,%s)
  lesserScope/2: lesserScope(%s,%s)
  li/1: li(%s)
  #   notCompatiblePurpse/2: notCompatiblePurpose(%s,%s)
  notConsentRequired/1: notConsentRequired(%s)
  notConsentRequired2TransferPii/1: notConsentRequired2TransferPii(%s)
  notTransferPii/1: notTransferPii(%s)
  notLi/1: notLi(%s)
  pii/1: pii(%s)
  notPii/1: notPii(%s)
  passive/2: passive(%s,%t)
  # partOf/2: partOf(%s,%s)
  qualifier/2: qualifier(%s,%s)
  resultScope/2: resultScope(%s,%s)
  resultScopeLocation/2:  resultScopeLocation(%s,%s)
  smallerOrEqualScope/2: smallerOrEqualScope(%s,%s)
  #  scope/2: scope(%s,%s)
  sourceScope/2: sourceScope(%s,%s)
  sourceScopeLocation/2:  sourceScopeLocation(%s,%s)
  transferPii/1: transferPii(%s)
  useScope/2: useScope(%s,%s)
  useScopeLocation/2: useScopeLocation(%s,%s)


issue_schemes:
#  compatiblePurpose: [compatiblePurpose(S), notCompatiblePurpose(S)]
  consent: [consentRequired(S), notConsentRequired(S)]
  docConsent: [docConsentRequired, notDocConsentRequired]
  li: [li(S), notLi(S)]
  pii: [pii(S), notPii(S)]
  id: [idRequired(S), idNotRequired(S)]
  transferPii: [transferPii(S), notTransferPii(S)]
  consentRequired2TransferPii: [consentRequired2TransferPii(S), notConsentRequired2TransferPii(S)]

argument_schemes:

  - id: selectors
    variables: [UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive]
    premises:
      - dataUseStatement(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive))
    conclusions:
      - useScope(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),UseScope)
      - useScopeLocation(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive), UseScopeLocation)
      - qualifier(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),Qualifier)
      - dataCategory(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),DataCategory)
      - sourceScope(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),SourceScope)
      - sourceScopeLocation(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),SourceScopeLocation)
      - action(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),Action)
      - resultScope(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),ResultScope)
      - resultScopeLocation(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),ResultScopeLocation)
      - id(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),ID)
      - passive(dus(UseScope,UseScopeLocation,Qualifier,DataCategory,SourceScope,SourceScopeLocation,Action,ResultScope,ResultScopeLocation,ID,Place,Passive),Passive)

  # isA rules
  - id: isA01
    variables: [X,Y,S]
    premises:
      - isA(X,Y)
    deletions:
      - resultScope(S,X)
    conclusions:
      - resultScope(S,Y)
 
  - id: isA02
    variables: [X,Y,S]
    premises:
      - isA(X,Y)
    deletions:
      - sourceScope(S,X)
    conclusions:
      - sourceScope(S,Y) 
        
  - id: isA03
    variables: [X,Y,S]
    premises:
      - isA(X,Y)
    deletions:
      - useScope(S,X)
    conclusions:
      - useScope(S,Y)

  # kindOf Rules

  - id: kindOfTransitivity
    variables: [X,Y,Z]
    premises:
      - kindOf(X,Y)
      - kindOf(Y,Z)
    conclusions:
      - kindOf(X,Z)

  # partOf Rules
  
  # - id: partOfTransitivity
    # variables: [X,Y,Z]
    # premises:
      # - partOf(X,Y)
      # - partOf(Y,Z)
    # conclusions:
      # - partOf(X,Z)

  # Data Qualifier Rules

  - id: qualifier1
    variables: [S]
    premises:
      - qualifier(S,identified_data)
    conclusions:
      - qualifier(S,unqualified_or_identified)

  - id: qualifier2
    variables: [S]
    premises:
      - qualifier(S,unqualified)  # ToDo: not yet in the taxonomy
    conclusions:
      - qualifier(S,unqualified_or_identified)

  # Scope Rules
  # Wider scopes include narrower scopes, expect for third_party items, which
  # independent scope.  For example, the service scope includes
  # the capability scope.
  
  # - id: scope1
    # variables: [S]
    # premises:
      # - scope(S,csp_products)
    # conclusions:
      # - scope(S,csp_services)

  # - id: scope2
    # variables: [S]
    # premises:
      # - scope(S,csp_services)
    # conclusions:
      # - scope(S,services_agreement)

  # - id: scope3
    # variables: [S]
    # premises:
      # - scope(S,services_agreement)
    # conclusions:
      # - scope(S,service)

  # - id: scope4
    # variables: [S]
    # premises:
      # - scope(S,service)
    # conclusions:
      # - scope(S,cability)

  # Data Category Rules

  - id: category0
    variables: [S,X,Y]
    premises:
      - dataCategory(S,X)
      - kindOf(X,Y)
    conclusions:
      - dataCategory(S,Y)
      
  - id: category1
    conclusions:
      - kindOf(derived_data_user_telemetry,derived_data_user)

  - id: category2
    conclusions:
      - kindOf(derived_data_user_connectivity,derived_data_user)

  - id: category3
    conclusions:
      - kindOf(derived_data_user_usage,derived_data_user)

  - id: category4
    conclusions:
      - kindOf(derived_data_user_demographic,derived_data_user)

  - id: category5
    conclusions:
      - kindOf(derived_data_user_profiling,derived_data_user)

  - id: category6
    conclusions:
      - kindOf(derived_data_user_content,derived_data_user)

  - id: category7
    conclusions:
      - kindOf(derived_data_user_browsing,derived_data_user)

  - id: category8
    conclusions:
      - kindOf(derived_data_user_search,derived_data_user)

  - id: category9
    conclusions:
      - kindOf(derived_data_user_location,derived_data_user)

  - id: category10
    conclusions:
      - kindOf(derived_data_user_social,derived_data_user)

  - id: category11
    conclusions:
      - kindOf(derived_data_user_biometric,derived_data_user)

  - id: category12
    conclusions:
      - kindOf(derived_data_user_contact,derived_data_user)

  - id: category13
    conclusions:
      - kindOf(derived_data_user_environmental,derived_data_user)

  - id: category14
    conclusions:
      - kindOf(customer_content_credentials,customer_content)

  - id: category15
    conclusions:
      - kindOf(customer_content_contact,customer_content)

  - id: category16
    conclusions:
      - kindOf(customer_content_health,customer_content)  

  - id: category17
    conclusions:
      - kindOf(customer_content_genetic,customer_content) 

  - id: category18
    conclusions:
      - kindOf(customer_content_biometric,customer_content) 

  - id: category19
    conclusions:
      - kindOf(customer_content_children,customer_content) 

  - id: category20
    conclusions:
      - kindOf(customer_content_opinions,customer_content) 

  - id: category21
    conclusions:
      - kindOf(customer_content_financial,customer_content) 

  - id: category22
    conclusions:
      - kindOf(derived_data_user,derived_data)

  - id: category23
    conclusions:
      - kindOf(derived_data_organization,derived_data)

  - id: category24
    conclusions:
      - kindOf(provider_data_authentication,provider_data)  

  - id: category25
    conclusions:
      - kindOf(provider_data_operations,provider_data) 

  - id: category26
    conclusions:
      - kindOf(account_data_customer,account_data)

  - id: category27
    conclusions:
      - kindOf(account_data_payment,account_data)

  # Action Rules

  - id: action0
    variables: [S,X,Y]
    premises:
      - action(S,X)
      - kindOf(X,Y)
    conclusions:
      - action(S,Y)
      
  - id: action1
    conclusions:
      - kindOf(market,market_advertise_promote) # To Do: Not in taxonomy

  - id: action2
    conclusions:
      - kindOf(advertise,market_advertise_promote) # To Do: Not in taxonomy

  - id: action3
    conclusions:
      - kindOf(promote,market_advertise_promote) # To Do: Not in taxonomy

  - id: action4
    conclusions:
      - kindOf(market_contextual,market)

  - id: action5
    conclusions:
      - kindOf(market_personalization,market)

  - id: action6
    conclusions:
      - kindOf(advertise_contextual,advertise)

  - id: action7
    conclusions:
      - kindOf(advertise_personalization,advertise)      

  - id: action8
    conclusions:
      - kindOf(promote_contextual,promote)

  - id: action9
    conclusions:
      - kindOf(promote_personalization,promote)        

  - id: action10
    conclusions:
      - kindOf(share_provide,share)            
      
  # docConsent Rules
  
  - id: docConsent1 # default
    weight:
       constant: 0.1   
    conclusions:
      - notDocConsentRequired

  - id: docConsent2
    meta:
       comment: >
          A data use document does require informed consent
          if any of its data use statements requires informed consent.
    variables: [S]
    premises:
      - consentRequired(S)
    conclusions:
      - docConsentRequired

  # PII Rules

  - id: pii0  # default rule
    weight:
      constant: 0.1 
    variables: [S]
    premises:
      - dataUseStatement(S)
    conclusions:
      - pii(S)

  # - id: pii1
  #   variables: [S]
  #   premises:
  #     - qualifier(S,unqualified_or_identified)
  #   conclusions:
  #     - pii(S)
  #   exceptions:
  #     - dataCategory(S,provider_data_operations)

  # - id: pii2
  #   variables: [S]
  #   premises:
  #     - qualifier(S,pseudonymized_data)
  #   conclusions:
  #     - pii(S)
  #   exceptions:
  #     - dataCategory(S,derived_data_organization)
      
  - id: pii3
    variables: [S]
    premises:
      - qualifier(S,unlinked_data)  
    conclusions:
      - notPii(S)

  - id: pii4
    variables: [S]
    premises:
      - qualifier(S,anonymized_data)  
    conclusions:
      - notPii(S)

  - id: pii5
    variables: [S]
    premises:
      - qualifier(S,aggregated_data)  
    conclusions:
      - notPii(S)

  - id: pii6
    variables: [S]
    premises:
      - qualifier(S,pseudonymized_data)
      - dataCategory(S,derived_data_organization)
    conclusions:
      - notPii(S)

  - id: pii7
    variables: [S]
    premises:
      - qualifier(S,pseudonymized_data)
      - dataCategory(S,provider_data_authentication) 
    conclusions:
      - notPii(S)

  - id: pii8
    variables: [S]
    premises:
      - qualifier(S,unqualified_or_identified)
      - dataCategory(S,derived_data_organization)
    conclusions:
      - notPii(S)

  - id: pii9
    variables: [S]
    premises:
      - qualifier(S,unqualified_or_identified)
      - dataCategory(S,provider_data_authentication)  
    conclusions:
      - notPii(S)

  # - id: pii10
  #   variables: [S]
  #   premises:
  #     - qualifier(S,unqualified)  # ToDo: not yet in the taxonomy file!
  #     - dataCategory(S,customer_content_credentials)
  #   conclusions:
  #    - pii(S)    

  - id: pii11
    variables: [S]
    premises:
      - qualifier(S,unqualified)  # ToDo: not yet in the taxonomy file!
      - dataCategory(S,derived_data_organization)
    conclusions:
      - notPii(S)

  - id: pii12
    variables: [S]
    premises:
      - qualifier(S,unqualified)  # ToDo: not yet in the taxonomy file!
      - dataCategory(S,provider_data_authentication) 
    conclusions:
      - notPii(S)        

  # Legitimate Interest (LI) Rules

  - id: li0  # default rule
    weight:
      constant: 0.1 
    variables: [S]
    premises:
      - dataUseStatement(S)
    conclusions:
      - notLi(S)

  - id: li1
    variables: [S]
    premises:
      - action(S,provide)
      - resultScope(S,capability)
    conclusions:
      - li(S)  

  - id: li2
    variables: [S]
    premises:
      - action(S,provide)
      - resultScope(S,service) 
    conclusions:
      - li(S)
      
  - id: li3
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,capability) 
    conclusions:
      - li(S)
      
  - id: li4
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,service)
    conclusions:
      - li(S)

  - id: li5
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,services_agreement) 
    conclusions:
      - li(S)

  - id: li6
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,csp_services)
    conclusions:
      - li(S)

  - id: li7
    variables: [S]
    premises:
      - action(S,improve)
      - resultScope(S,csp_products)
    conclusions:
      - li(S)

  - id: li8
    variables: [S]
    premises:
      - action(S,personalize)
      - resultScope(S,capability)
    conclusions:
      - li(S)

  - id: li9
    variables: [S]
    premises:
      - action(S,personalize)
      - resultScope(S,service)
    conclusions:
      - li(S)

  - id: li10
    variables: [S]
    premises:
      - action(S,upgrades)
      - resultScope(S,capability)
    conclusions:
      - li(S)
      
  - id: li11
    variables: [S]
    premises:
      - action(S,upgrades)
      - resultScope(S,service)
    conclusions:
      - li(S)

  - id: li12
    variables: [S]
    premises:
      - action(S,upgrades)
      - resultScope(S,services_agreement)
    conclusions:
      - li(S)

  - id: li13
    variables: [S]
    premises:
      - action(S,market_advertise_promote)
      - resultScope(S,capability)
    conclusions:
      - li(S)

  - id: li14
    variables: [S]
    premises:
      - action(S,market_advertise_promote)
      - resultScope(S,service)
    conclusions:
      - li(S)
  
  # equivalentScope Rules

  - id: equivalentScope0
    variables: [S1,S2,S]
    premises:
      - resultScope(S1,S)
      - resultScope(S2,S)
    conclusions:
      - equivalentScope(S1,S2)

  - id: equivalentScope1
    variables: [S1,S2]
    premises:
      - resultScope(S1,capability)
      - resultScope(S2,service)
    conclusions:
      - equivalentScope(S1,S2)
      
  - id: equivalentScope2
    variables: [S1,S2]
    premises:
      - resultScope(S1,services_agreement)
      - resultScope(S2,csp_services)
    conclusions:
      - equivalentScope(S1,S2)
      
  - id: equivalentScope3
    variables: [S1,S2]
    premises:
      - resultScope(S1,third_party_partners)
      - resultScope(S2,third_party_services) 
    conclusions:
      - equivalentScope(S1,S2)

  - id: equivalentScope4
    variables: [S1,S2]
    premises:
      - resultScope(S1,third_party_services) 
      - resultScope(S2,third_party_partners) 
    conclusions:
      - equivalentScope(S1,S2)

  # smallerOrEqualScope Rules

  - id: smallerOrEqualScope1   # equal scopes
    variables: [S1,S2,C]
    premises:
      - resultScope(S1,C) 
      - resultScope(S2,C)
    conclusions:
      - smallerOrEqualScope(S1,S2)

  - id: smallerOrEqualScope2 # delete duplicates
    variables: [S1,S2]
    premises:
      - smallerOrEqualScope(S1,S2)
    deletions:
      - smallerOrEqualScope(S1,S2)
    conclusions:
      - true

  - id: smallerOrEqualScope3  # transitivity
    variables: [S1,S2,S3]
    premises:
      - smallerOrEqualScope(S1,S2) 
      - smallerOrEqualScope(S2,S3)
    conclusions:
      - smallerOrEqualScope(S1,S3)

  - id: smallerOrEqualScope4
    variables: [S1,S2,P1,P2]
    premises:
      - resultScope(S1,P1)
      - resultScope(S2,P2)
      - lesserScope(P1,P2)
    conclusions:
      - smallerOrEqualScope(S1,S2)

  # lesserScope Rules

  - id: lesserScope1
    conclusions:
      - lesserScope(capability,service)
      - lesserScope(service,services_agreement)
      - lesserScope(services_agreement,csp_services)
      - lesserScope(csp_services,csp_products)

  # compatiblePurpose Rules

  - id: compatiblePurposeDuplicates
    variables: [S1,S2]
    premises:
      - compatiblePurpose(S1,S2)
    deletions:
      - compatiblePurpose(S1,S2)
    conclusions:
      - true
 
  # - id: compatiblePurpose0  # default rule
  #   weight:
  #     constant: 0.1 
  #   variables: [S1,S2]
  #   premises:
  #     - dataUseStatement(S1)
  #     - dataUseStatement(S2)
  #   conclusions:
  #     - notCompatiblePurpose(S1,S2)

  - id: compatiblePurpose1
    variables: [S1,S2,A]
    premises:
      - action(S1,A)
      - action(S2,A)
      - equivalentScope(S1,S2)
    conclusions:
      - compatiblePurpose(S1,S2)

  - id: compatiblePurpose2
    variables: [S1,S2]
    premises:
      - action(S1,provide)
      - action(S2,improve)
      - smallerOrEqualScope(S2,csp_products)
    conclusions:
      - compatiblePurpose(S1,S2)

  - id: compatiblePurpose3
    variables: [S1,S2]
    premises:
      - action(S1,provide)
      - action(S2,upgrades)
      - equivalentScope(S1,S2)
    conclusions:
      - compatiblePurpose(S1,S2)

  - id: compatiblePurpose4
    variables: [S1,S2]
    premises:
      - action(S1,provide)
      - action(S2,market_advertise_promote)
      - equivalentScope(S1,S2)
    conclusions:
      - compatiblePurpose(S1,S2)

  - id: compatiblePurpose5
    variables: [S1,S2]
    premises:
      - action(S1,improve)
      - action(S2,improve)
      - smallerOrEqualScope(S2,csp_products)
    conclusions:
      - compatiblePurpose(S1,S2)

  - id: compatiblePurpose6
    variables: [S1,S2]
    premises:
      - action(S1,personalize)
      - action(S2,personalize)
      - smallerOrEqualScope(S2,services_agreement)
    conclusions:
      - compatiblePurpose(S1,S2)

  - id: compatiblePurpose7
    variables: [S1,S2]
    premises:
      - action(S1,personalize)
      - action(S2,market_advertise_promote)
      - smallerOrEqualScope(S2,services_agreement)
    conclusions:
      - compatiblePurpose(S1,S2)

  - id: compatiblePurpose8
    variables: [S1,S2]
    premises:
      - action(S1,upgrades)
      - action(S2,upgrades)
      - smallerOrEqualScope(S2,services_agreement)
    conclusions:
      - compatiblePurpose(S1,S2)   
            
      
  # consentRequired Rules

  - id: consentRequired0  # remove duplicate consentRequired statements
    variables: [S1]
    premises:
      - consentRequired(S1)
    deletions:
      - consentRequired(S1)
    conclusions:
      - true

  - id: consentRequired1 # remove duplicate notConsentRequired statements
    variables: [S1]
    premises:
      - notConsentRequired(S1)
    deletions: 
      - notConsentRequired(S1)
    conclusions:      
      - true

  - id: consentRequired2  # default rule
    weight:
      constant: 0.1
    variables: [S]
    premises:
      - dataUseStatement(S)
    conclusions:
      - consentRequired(S)

  # - id: consentRequired3 
  #   variables: [S]
  #   premises:
  #     - pii(S)
  #     - notLi(S)
  #   conclusions:
  #     - consentRequired(S)
      
  - id: consentRequired3
    variables: [S]
    premises:
      - notPii(S)
    conclusions:
      - notConsentRequired(S)

  - id: consentRequired4
    variables: [S]
    premises:
      - pii(S)
      - li(S)
    conclusions:
      - notConsentRequired(S)

  # Note that consentRequired5 and consentRequired6 can lead
  # to rebuttals (arguments pro and con)
  
  - id: consentRequired5
    variables: [S1,S2]
    premises:
      - pii(S1)
      - pii(S2)
      - li(S2)
      - compatiblePurpose(S1,S2)
    conclusions:
      - notConsentRequired(S1)
       
  # - id: consentRequired6
  #   variables: [S1,S2]
  #   premises:
  #     - pii(S1)
  #     - consentRequired(S2)
  #     - compatiblePurpose(S1,S2)
  #   conclusions:
  #     - consentRequired(S1)


  #### EU GDPR Article 11 rules

  - id: idRequired
    variables: [S]
    weight:
      constant: 0.1
    premises:
      - dataUseStatement(S)
    conclusions:
      - idRequired(S)  
  
  - id: idNotRequired1
    variables: [S]
    premises:
      - dataCategory(S,customer_content)
      - qualifier(S,aggregated_data)
    conclusions:
      - idNotRequired(S)


  - id: idNotRequired2
    variables: [S]
    premises:
      - dataCategory(S,derived_data)
      - qualifier(S,aggregated_data)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired3
    variables: [S]
    premises:
      - dataCategory(S,derived_data)
      - qualifier(S,anonymized_data)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired4
    variables: [S]
    premises:
      - dataCategory(S,derived_data)
      - qualifier(S,unlinked_data)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired5
    variables: [S]
    premises:
      - dataCategory(S,derived_data_organization)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired6
    variables: [S]
    premises:
      - dataCategory(S,provider_data)
      - qualifier(S,aggregated_data)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired7
    variables: [S]
    premises:
      - dataCategory(S,provider_data)
      - qualifier(S,anonymized_data)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired8
    variables: [S]
    premises:
      - dataCategory(S,provider_data)
      - qualifier(S,unlinked_data)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired9
    variables: [S]
    premises:
      - dataCategory(S,account_data)
      - qualifier(S,aggregated_data)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired10
    variables: [S]
    premises:
      - dataCategory(S,account_data)
      - qualifier(S,anonymized_data)
    conclusions:
      - idNotRequired(S)

  - id: idNotRequired11
    variables: [S]
    premises:
      - dataCategory(S,account_data)
      - qualifier(S,unlinked_data)
    conclusions:
      - idNotRequired(S)
      
  ### EU GDPR Article 44-50 - data transferPii
  ###  
  ### empty scope location
  - id: emtyUseScopeLocation01
    variables: [S]
    deletions: 
      - useScopeLocation(S,null)
    conclusions:
      - true  

  - id: emtySourceScopeLocation01
    variables: [S]
    deletions: 
      - sourceScopeLocation(S,null)
    conclusions:
      - true  
      
  - id: emtyersultScopeLocation01
    variables: [S]
    deletions: 
      - resultScopeLocation(S,null)
    conclusions:
      - true  
  
  
  ### transfer inside EU
  - id: isEu01
    conclusions:
      - isInEu(eu)
  - id: isEu02
    conclusions:
      - isInEu(at)
  - id: isEu03
    conclusions:
      - isInEu(be)
  - id: isEu04
    conclusions:
      - isInEu(bg)
  - id: isEu05
    conclusions:
      - isInEu(hr)
  - id: isEu06
    conclusions:
      - isInEu(cy)
  - id: isEu07
    conclusions:
      - isInEu(cz)
  - id: isEu08
    conclusions:
      - isInEu(dk)
  - id: isEu09
    conclusions:
      - isInEu(ee)
  - id: isEu10
    conclusions:
      - isInEu(fi)
  - id: isEu11
    conclusions:
      - isInEu(fr)
  - id: isEu12
    conclusions:
      - isInEu(de)
  - id: isEu13
    conclusions:
      - isInEu(gr)
  - id: isEu14
    conclusions:
      - isInEu(hu)
  - id: isEu15
    conclusions:
      - isInEu(ie)
  - id: isEu16
    conclusions:
      - isInEu(it)
  - id: isEu17
    conclusions:
      - isInEu(lv)
  - id: isEu18
    conclusions:
      - isInEu(lt)
  - id: isEu19
    conclusions:
      - isInEu(lu)
  - id: isEu20
    conclusions:
      - isInEu(mt)
  - id: isEu21
    conclusions:
      - isInEu(nl)
  - id: isEu22
    conclusions:
      - isInEu(pl)
  - id: isEu23
    conclusions:
      - isInEu(pt)
  - id: isEu24
    conclusions:
      - isInEu(ro)
  - id: isEu25
    conclusions:
      - isInEu(sk)
  - id: isEu26
    conclusions:
      - isInEu(si)
  - id: isEu27
    conclusions:
      - isInEu(es)
  - id: isEu28
    conclusions:
      - isInEu(se)
  # adequacy protection as EU
  - id: apaEu01
    conclusions:
      - apaEu(dach)
  - id: apaEu01
    conclusions:
      - apaEu(ad)
  - id: apaEu01
    conclusions:
      - apaEu(ar)
  - id: apaEu01
    conclusions:
      - apaEu(ca)
  - id: apaEu01
    conclusions:
      - apaEu(fo)
  - id: apaEu01
    conclusions:
      - apaEu(gg)
  - id: apaEu01
    conclusions:
      - apaEu(il)
  - id: apaEu01
    conclusions:
      - apaEu(im)
  - id: apaEu01
    conclusions:
      - apaEu(je)
  - id: apaEu01
    conclusions:
      - apaEu(nz)
  - id: apaEu01
    conclusions:
      - apaEu(ch)
  - id: apaEu01
    conclusions:
      - apaEu(uy)
  - id: apaEu01
    conclusions:
      - apaEu(us)
      
  ## Scope Location in EU 
  
  - id: scopeLocationInEu01
    variables: [S,L]
    premises: 
      - isInEu(L)
    deletions: 
      - sourceScopeLocation(S,L)
    conclusions:
      - true 
      
  - id: scopeLocationInEu02
    variables: [S,L]
    premises: 
      - isInEu(L)
    deletions: 
      - useScopeLocation(S,L)
    conclusions:
      - true  
      
  - id: scopeLocationInEu03
    variables: [S,L]
    premises: 
      - isInEu(L)
    deletions: 
      - resultScopeLocation(S,L)
    conclusions:
      - true  
      
  ## Scope Location with adequacy protection as EU 
  
  - id: scopeLocationApaEu01
    variables: [S,L]
    premises: 
      - apaEu(L)
    deletions: 
      - sourceScopeLocation(S,L)
    conclusions:
      - true 
      
  - id: scopeLocationApaEu02
    variables: [S,L]
    premises: 
      - apaEu(L)
    deletions: 
      - useScopeLocation(S,L)
    conclusions:
      - true  
      
  - id: scopeLocationApaEu03
    variables: [S,L]
    premises: 
      - apaEu(L)
    deletions: 
      - resultScopeLocation(S,L)
    conclusions:
      - true  
      
  ### ScopeLocation and not PII

  - id: scopeLocationNoPii01
    variables: [S,L]
    premises: 
      - notPii(S)
    deletions: 
      - sourceScopeLocation(S,L)
    conclusions:
      - true 
      
  - id: scopeLocationNoPii02
    variables: [S,L]
    premises: 
      - notPii(S)
    deletions: 
      - useScopeLocation(S,L)
    conclusions:
      - true  
      
  - id: scopeLocationNoPii03
    variables: [S,L]
    premises: 
      - notPii(S)
    deletions: 
      - resultScopeLocation(S,L)
    conclusions:
      - true  
  ### ScopeLocation and not Legitimate Interest

  - id: scopeLocationLi01
    variables: [S,L]
    premises: 
      - li(S)
    deletions: 
      - sourceScopeLocation(S,L)
    conclusions:
      - true 
      
  - id: scopeLocationLi02
    variables: [S,L]
    premises: 
      - li(S)
    deletions: 
      - useScopeLocation(S,L)
    conclusions:
      - true  
      
  - id: scopeLocationLi03
    variables: [S,L]
    premises: 
      - li(S)
    deletions: 
      - resultScopeLocation(S,L)
    conclusions:
      - true  
      
  ### transferPII

  - id: notTransferPII01
    variables: [S]
    weight:
      constant: 0.1
    premises:
      - dataUseStatement(S)
    conclusions:
      - notTransferPii(S)  
      
  - id: TransferPII01
    variables: [S,L]
    premises: 
      - useScopeLocation(S,L)
    conclusions:
      - transferPii(S)  

  - id: TransferPII02
    variables: [S,L]
    premises:
      - sourceScopeLocation(S,L)
    conclusions:
      - transferPii(S)  
      
  - id: TransferPII03
    variables: [S,L]
    premises:
      - resultScopeLocation(S,L)
    conclusions:
      - transferPii(S)   

  ## other Scope location ==> Consent Required to Transfer PII
  
  - id: consentRequired2TransferPii01
    variables: [S,L]
    premises: 
      - sourceScopeLocation(S,L)
    deletions: 
      - notConsentRequired(S)
    conclusions:
      - consentRequired(S)
      - consentRequired2TransferPii(S)      
      
  - id: consentRequired2TransferPii02
    variables: [S,L]
    premises: 
      - sourceScopeLocation(S,L)
    conclusions:
      - consentRequired2TransferPii(S) 
  
  - id: consentRequired2TransferPii03
    variables: [S,L]
    premises: 
      - useScopeLocation(S,L)
    deletions: 
      - notConsentRequired(S)
    conclusions:
      - consentRequired(S)
      - consentRequired2TransferPii(S)      
      
  - id: consentRequired2TransferPii04
    variables: [S,L]
    premises: 
      - useScopeLocation(S,L)
    conclusions:
      - consentRequired2TransferPii(S) 
  
  - id: consentRequired2TransferPii01
    variables: [S,L]
    premises: 
      - resultScopeLocation(S,L)
    deletions: 
      - notConsentRequired(S)
    conclusions:
      - consentRequired(S)
      - consentRequired2TransferPii(S)      
      
  - id: consentRequired2TransferPii02
    variables: [S,L]
    premises: 
      - resultScopeLocation(S,L)
    conclusions:
      - consentRequired2TransferPii(S) 
  




