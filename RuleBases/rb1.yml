meta:
  title: Test DUCK Rulebase
  description: >
    This is a trivial ulebase for testing the integration of DUCK with
    Carneades.
  version: 1
  id: 1


language:
  compliant: compliant
  not_compliant: not compliant
  dataUseStatement/1: dataUseStatement(%s)
  useScope/2: useScope(%s,%s)
  qualifier/2: qualifier(%s,%s)
  dataCategory/2: dataCategory(%s,%s)
  sourceScope/2: sourceScope(%s,%s)
  action/2: action(%s,%s)
  resultScope/2: resultScope(%s,%s)
  id/2: id(%s,%s)
  passive/2: passive(%s,%t)
  duplicate/2: duplicate(%s,%s)

# nullary predicates are not automatically statements
# should they be?
# statements:
#   compliant: The document is compliant.
#   not_compliant: The document is not compliant.

# issues:
#   i1:
#     positions: [compliant, not_compliant]

issue_schemes:
  compliance:
    - compliant
    - not_compliant

argument_schemes:
  - id: default
    meta:
      title: Default Data Use Document Compliance Rule
      notes: >
          A data use document is compliant, by default, unless it has
          been proven to not be compliant. The opposite of negation as failure!
          Success by failure?
    weight:
      constant: 0.1   # low threshold to be overcome by rebuttals
    conclusions:
      - compliant

  - id: selectors
    variables: [UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive]
    premises:
      - dataUseStatement(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive))
    conclusions:
      - useScope(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),UseScope)
      - qualifier(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),Qualifier)
      - dataCategory(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),DataCategory)
      - sourceScope(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),SourceScope)
      - action(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),Action)
      - resultScope(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),ResultScope)
      - id(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),ID)
      - passive(dus(UseScope,Qualifier,DataCategory,SourceScope,Action,ResultScope,ID,Passive),Passive)

  - id: duplicates
    weight:
      constant: 0.5
    variables: [S1,US,S2,Q,DC,A,RS,ID1,ID2,P1,P2]
    premises:
      - useScope(S1,US)
      - useScope(S2,US)
      - qualifier(S1,Q)
      - qualifier(S2,Q)
      - dataCategory(S1,DC)
      - dataCategory(S2,DC)
      - sourceScope(S1,SS)
      - sourceScope(S2,SS)
      - action(S1,A)
      - action(S2,A)
      - resultScope(S1,RS)
      - resultScope(S2,RS)
      - id(S1,ID1)
      - id(S2,ID2)
      - passive(S1,P1)
      - passive(S2,P2)
    guards:
      # - ID1 =\= ID2
      # To do: this guard is not working.
      # Uncommenting the guard causes the rule to fail
      # Commenting it out seems to work for this example,
      #   presumably because none of the properties
      #   are matched twice for the same statement.
    conclusions:
      - duplicate(S1,S2)

  - id: duplicatesNotCompliant
    meta:
      title: Duplicate Data Use Statements Are Not Permitted
      note: >
        A data use document is not compliant if it contains duplicate data use statements. 
        This is just a dummy rule for testing.  It may not
        reflect any actual rule. Compliance can be restored by removing the duplicates.
    variables: [S1,S2]
    weight:
      constant: 0.5
    premises:
      - duplicate(S1,S2)
    conclusions:
      - not_compliant
    

